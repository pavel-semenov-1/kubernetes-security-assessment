# Default values for demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

# 6.1 and 6.2
securityContext:
  capabilities:
    add:
    - ALL # Grants all capabilities to the container
  readOnlyRootFilesystem: false # Allows the root filesystem to be writable
  runAsNonRoot: false # Allows the container to run as root
  runAsUser: 0 # Runs the container as the root user

subjects:
  host: demo-backend.demo-subjects.svc.cluster.local
  port: 8088

backend:
  init:
    image: busybox
    name: wait-for-postgres-db
  service:
    # 4.1 Unnecessary service exposure
    type: LoadBalancer
    port: 8080
    name: demo-backend
  image:
    repository: demo-users/backend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  configMap:
    name: datasource-config
  secret:
    name: datasource-secret
    password: welcome1
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
    initialDelaySeconds: 7
    periodSeconds: 3
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
    initialDelaySeconds: 7
    periodSeconds: 3

frontend:
  service:
    type: LoadBalancer
    port: 3000
    name: demo-frontend
  image:
    repository: demo-users/frontend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  configMap:
    name: datasource-config
  secret:
    name: datasource-secret
    password: welcome1
  livenessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5

database:
  service:
    type: ClusterIP
    port: 5432
    name: postgres
  sts:
    image:
      repository: postgres
      pullPolicy: IfNotPresent
    name: postgres
    volumes:
    - name: postgres
      persistentVolumeClaim:
        claimName: postgres-data
    volumeMounts:
    - name: postgres
      mountPath: /var/lib/postgresql/data
    readinessProbe:
      exec:
        command:
        - "/usr/bin/pg_isready"
      initialDelaySeconds: 10
      periodSeconds: 5
    livenessProbe:
      exec:
        command:
        - "/usr/bin/pg_isready"
      initialDelaySeconds: 10
      periodSeconds: 5

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

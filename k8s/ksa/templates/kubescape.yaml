apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kubescape
  name: kubescape-discovery
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubescape-discovery-clusterroles
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "describe"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubescape-discovery-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubescape-discovery-clusterroles
subjects:
- kind: ServiceAccount
  name: kubescape-discovery
  namespace: {{ .Release.Namespace }}
---
{{- if .Values.kubescape.deploy }}
apiVersion: batch/v1
kind: Job
metadata:
  name: kubescape
  namespace: {{ .Release.Namespace }}
spec:
  template:
    metadata:
      name: kubescape
    spec:
      serviceAccountName: kubescape-discovery
      restartPolicy: OnFailure
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      # volumes:
      # - name: kube-config
      #   hostPath:
      #     path: /Users/pavel/.kube/config
      #     type: File
      containers:
        - name: kubescape
          image: {{ .Values.kubescape.image }}
          imagePullPolicy: IfNotPresent
          # volumeMounts:
          # - name: kube-config
          #   mountPath: /home/.kube/config
          # env:
          # - name: KUBECONFIG
          #   value: /home/.kube/config
          command:
          - sleep
          - inf
          # args: 
          # - -l
          # - debug
          # - operator
          # - scan
          # - configurations
          # command:
          #   - sh
          #   - -c
          #   - |
          #     kubescape operator scan configurations
          #     kubescape operator scan vulnerabilities
          #     echo "Waiting for scan completion..."
          #     while true; do
          #       STATUS=$(kubectl get VulnerabilityManifestSummary -n {{ .Release.Namespace }} -o jsonpath="{.items[0].metadata.annotations.kubescape\.io/status}" 2>/dev/null)
          #       if [ "$STATUS" = "ready" ]; then
          #         echo "Scan finished!"
          #         break
          #       fi
          #       sleep 10
          #     done
{{- end }}